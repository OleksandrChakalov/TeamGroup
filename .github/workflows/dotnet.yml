name: Run test when create pull request to main

on:
  pull_request:
    branches: [ main, feature ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies for React app
        run: npm install --prefix ./GS.WebApi/GS.WebApp/ClientApp/

      - name: Build React app
        run: npm run build --prefix ./GS.WebApi/GS.WebApp/ClientApp/

      - name: Lint React app
        run: npm run lint --prefix ./GS.WebApi/GS.WebApp/ClientApp/

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 5.0.x

      - name: Restore dependencies
        run: dotnet restore ./GS.WebApi/GoSee.sln

      - name: Build GS.Data.Test
        run:  dotnet build --configuration Release ./GS.WebApi/GS.Data.Test

      - name: Build GS.Business.Test
        run:  dotnet build --configuration Release ./GS.WebApi/GS.Business.Test

      - name: Run test in GS.Business.Test
        run:  dotnet test ./GS.WebApi/GS.Business.Test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Upload code coverage report
        uses: codecov/codecov-action@v1
        with:
          files: ./GS.WebApi/GS.Business.Test/coverage.opencover.xml
          name: GS.Business.Test Coverage Report
          flags: unittests
          fail_ci_if_error: true

      - name: Run test in GS.Data.Test
        run:  dotnet test ./GS.WebApi/GS.Data.Test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Archive Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            ./GS.WebApi/GS.Data.Test/TestResults
            ./GS.WebApi/GS.Business.Test/TestResults

      - name: Generate code coverage report
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

#      - name: Generate test coverage report
#        run: dotnet tool install -g dotnet-reportgenerator-globaltool && reportgenerator "-reports:./GS.WebApi/GS.Business.Test/coverage.opencover.xml;./GS.WebApi/GS.Data.Test/coverage.opencover.xml" "-targetdir:./coverage" -reporttypes:Html



